{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","original","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAgCeA,EA7BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAiBrC,OACI,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,OAMd,4BAAKD,GACL,2BACIQ,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,YCMhBG,EAZK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAI1B,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCRHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAUF,GAF9C,+DAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,SAASjB,QAVf,kBAcZY,GAdY,4CAAH,sDCGPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAdAC,qBAAW,WACPlB,EAAQC,GACHkB,MAAM,SAAAC,GAGCH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAK1B,CAACd,IAEGe,EDnBwBK,CAAapB,GAAhCW,EAFuB,EAE5BL,KAAaQ,EAFe,EAEfA,QAEpB,OACI,oCACI,wBAAIlB,UAAU,qCAAqCI,GACjDc,GAAW,uBAAGlB,UAAU,oCAAb,eAEb,yBAAKA,UAAU,aAGPe,EAAOH,KAAK,SAAEC,GAAF,OACR,kBAAC,EAAD,eACIY,IAAKZ,EAAIC,IACLD,UEoBjBa,EAnCM,WAAM,MAGa1C,mBAAS,CAAC,gBAHvB,mBAGhBQ,EAHgB,KAGJT,EAHI,KASvB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAMQS,EAAWoB,KAAI,SAAAR,GAAQ,OACf,kBAAC,EAAD,CACIqB,IAAKrB,EACLA,SAAUA,U,MCzB1CuB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.ff2020c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) =>{\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n    const handleOnSubmit = (e)=>{\n        e.preventDefault();\n        //console.log('Echo el submit');\n\n        if(inputValue.trim().length>2){\n            setCategories( categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n\n    }\n    return (\n        <form onSubmit={handleOnSubmit}>\n            <h1>{inputValue}</h1>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nexport default AddCategory;\n\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}","import React from 'react';\n\nconst GifGridItem = ( {title, url} ) => {\n    \n    //console.log('test... ' + id, title, url)\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">  \n            <img src={url} alt={title}/>  \n            <p>{title}</p>      \n        </div>\n    )\n}\n\nexport default GifGridItem;","\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=YMZNt474P6HWh2ArNMp8o9FN0rPyq1D3`;\n    const resp = await fetch(url)\n    const {data} = await resp.json();\n    \n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.original.url\n        }\n    })\n    \n    return gifs;\n}","import React from 'react'\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n            { loading && <p className='animate__animated animate__flash'>Cargando...</p>}\n\n            <div className=\"card-grid\">\n                \n                {\n                    images.map( ( img ) => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}//mandamos todos los atributos del objeto\n                        />\n                    ))\n                    }\n            </div>\n        </>\n    )\n\n    /* \n    return (\n        <div>\n            <h3>{category}</h3>\n            <h4>{count}</h4>\n            <button onClick={()=>setCount(count+1)}>contar</button>\n        </div>\n    )\n    */\n}\n","import {useState, useEffect} from 'react'\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    //Para evitar que se renderice este metodo de manera infinita\n    useEffect( () => {\n        getGifs(category)\n            .then( imgs => {\n\n                //setTimeout( () => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n                //}, 1500);\n\n            })\n    }, [category]);//para quitar warning de que depende de una variable que puede cambiar\n\n    return state;\n}","import React, { useState } from 'react'\nimport AddCategory from './AddCategory'\nimport { GifGrid } from './GifGrid';\n\nconst GifExpertApp = () => {\n\n    //const categorias = ['One puch', 'Samurai','Dragon Ball'];\n    const [categories, setCategories] = useState(['Dragon Ball']);\n    \n    /*const handleAdd = ()=>{\n        setCategories([...categories,'Hunter'])\n    }*/\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n\n            {/*<button onClick={handleAdd}>Agregar</button>*/}\n\n            <ol>\n                {/*Va dentro del map<li key={category}>{category}</li>*/}\n\n               {\n                    \n\n                    categories.map(category => (\n                            <GifGrid \n                                key={category} \n                                category={category} />\n                        )\n                    )\n               } \n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}